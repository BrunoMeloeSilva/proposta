# MariaDB
spring.datasource.url=${DB_URL:jdbc:mariadb://127.0.0.1:3306/proposta?createDatabaseIfNotExist=true}
spring.datasource.username=${DB_USER:root}
spring.datasource.password=${DB_PASS:root}
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
# JPA
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
# Actuator (health, metrics, prometheus)
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health,info,prometheus,metrics
#management.endpoints.prometheus.enabled=true
#management.endpoints.web.base-path=
management.endpoints.web.exposure.exclude=env,beans
info.app.name=@project.name@
info.app.description=@project.description@
info.app.version=@project.version@
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:propostas}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}
# Consulta a APIs Externas
## RESTRICOES FINANCEIRAS
api.restricoesFinanceiras.domain=${API_RESTRICOESFINANCEIRAS_DOMAIN:http://localhost:9999}
api.restricoesFinanceiras.domain.recurso=${API_RESTRICOESFINANCEIRAS_RECURSO:/api/solicitacao}
## CARTOES
api.cartoes.domain=${API_CARTOES_DOMAIN:http://localhost:8888}
api.cartoes.domain.recurso=${API_CARTOES_RECURSO:/api/cartoes?idProposta={idProposta}}
api.cartoes.domain.recurso.bloqueio=${API_CARTOES_RECURSO_BLOQUEIO:/api/cartoes/{numeroCartao}/bloqueios}
api.cartoes.domain.recurso.avisoviagem=${API_CARTOES_RECURSO_AVISOVIAGEM:/api/cartoes/{numeroCartao}/avisos}
api.cartoes.domain.recurso.vincularcarteira=${API_CARTOES_RECURSO_VINCULARCARTEIRA:/api/cartoes/{numeroCartao}/carteiras}

# spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}

#JAEGER - OpenTracing
# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}
# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${APPLICATION:@project.name@}
# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}
# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
# opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1.0}
# True para enviar 100%  das amostragens.
opentracing.jaeger.const-sampler.decision=${JAEGER_SAMPLER:true}

#logging.level.org.springframework.security=DEBUG

# SENHAS PARA CRIPTOGRAFIA
br.com.zupacademy.brunomeloesilva.proposta.criptografia.senha=${CRIPTOGRAFIA_SENHA:$2a$10$g94wrka7jg87hvfnfvcmcePM8CBfi2US0s34UhqyeTcr4SoGv/Eym}
br.com.zupacademy.brunomeloesilva.proposta.criptografia.salt=${CRIPTOGRAFIA_SALT:6fc69b60ac13ab3a}
